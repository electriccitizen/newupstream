<?php

/**
 * @file
 * Contains oc_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function oc_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the oc_custom module.
    case 'help.page.oc_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Open Citizen sites') . '</p>';
      return $output;

    default:
  }
}



/**
 * Implements hook_theme().
 */
function oc_custom_theme() {
  return [
    'oc_custom' => [
      'template' => 'oc_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
  ];
}

/**
 * Preprocess function for grid views of the media library.
 *
 * @param array $variables
 *   Template variables.
 */
function oc_custom_preprocess_views_view_grid__media(array &$variables) {
  foreach ($variables['items'] as &$item) {
    foreach ($item['content'] as &$column) {
      $column['attributes']['data-selectable'] = 'true';
    }
  }
}

/* ADD USER ROLE CLASSES
------------------------*/
function oc_custom_preprocess_html(&$variables){
  /* Find the current user */
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
  }
}

/*
 * attach css and custom.js to node form only
 */
function oc_custom_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form['#attached']['library'][] = 'oc_custom/custom';
}

/*
 * attach SELECT2 globally
 */
function oc_custom_page_attachments(array &$attachments){
    $attachments['#attached']['library'][] = 'oc_custom/custom-global';
}


/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function oc_custom_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'site_search') {
    $variables['attributes']['role'] = 'search';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 *
 * Since the exposed form is a GET form, we don't want it to send the form
 * tokens. However, you cannot make this happen in the form builder function
 * itself, because the tokens are added to the form after the builder function
 * is called. So, we have to do it in a form_alter.
 *
 * @see \Drupal\search\Form\SearchBlockForm
 */
function oc_custom_form_site_search_form_alter(&$form, FormStateInterface $form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}
